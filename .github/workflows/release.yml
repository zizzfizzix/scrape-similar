name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and create extension package
        run: npm run zip

      - name: Generate Release Notes using conventional-changelog
        id: generate_release_notes
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix for changelog matching
          VERSION_NUMBER=${VERSION#v}

          # Generate changelog with unreleased section
          npx conventional-changelog -i CHANGELOG.md --same-file -p angular -r 0 --output-unreleased

          # Extract the unreleased section for release notes
          if [ -f "CHANGELOG.md" ]; then
            # First try to extract the unreleased section
            UNRELEASED_CONTENT=$(sed -n '/^## \[Unreleased\]/,/^## /p' CHANGELOG.md | sed '$d' | sed '1d')
            
            if [ -n "$UNRELEASED_CONTENT" ]; then
              # Use unreleased content
              echo "## What's Changed in $VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "$UNRELEASED_CONTENT" >> release_notes.md
            else
              # Extract the latest version section (the one that matches our current version)
              VERSION_SECTION=$(sed -n "/^## \[$VERSION_NUMBER\]/,/^## /p" CHANGELOG.md | sed '$d' | sed '1d')
              
              if [ -n "$VERSION_SECTION" ]; then
                echo "## What's Changed in $VERSION" > release_notes.md
                echo "" >> release_notes.md
                echo "$VERSION_SECTION" >> release_notes.md
              else
                # Fallback: create a basic release note
                echo "## What's Changed in $VERSION" > release_notes.md
                echo "" >> release_notes.md
                echo "No detailed changelog available." >> release_notes.md
                echo "" >> release_notes.md
              fi
            fi
          else
            # Fallback if CHANGELOG.md doesn't exist
            echo "## What's Changed in $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "No detailed changelog available." >> release_notes.md
            echo "" >> release_notes.md
          fi

          # Add installation and support sections
          {
            echo ""
            echo "## Installation"
            echo ""
            echo "Download the \`scrape-similar-$VERSION.zip\` file and install it manually in Chrome at \`chrome://extensions/\`."
            echo ""
            echo "## Support"
            echo ""
            echo "If you encounter any issues or have questions, please [open an issue](https://github.com/${{ github.repository }}/issues) on GitHub."
            echo ""
            echo "---"
            echo ""
            echo "*Release generated automatically on $(date -u +"%Y-%m-%d %H:%M UTC")*"
          } >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            package/scrape-similar-${{ github.ref_name }}.zip
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
