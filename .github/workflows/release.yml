name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and create extension package
        run: npm run zip

      - name: Generate Release Notes from Commits
        id: generate_release_notes
        run: |
          # Get the version from the tag
          VERSION=${GITHUB_REF#refs/tags/}

          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            # Generate changelog between tags
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD | grep -v "Merge pull request" | grep -v "Merge branch")
          else
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" | grep -v "Merge pull request" | grep -v "Merge branch")
          fi

          # Categorize changes based on conventional commit types (including scoped commits)
          FEATURES=$(echo "$CHANGELOG" | grep -i "^.*feat\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*feat:" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "^.*fix\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*fix:" || echo "")
          DOCS=$(echo "$CHANGELOG" | grep -i "^.*docs\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*docs:" || echo "")
          STYLE=$(echo "$CHANGELOG" | grep -i "^.*style\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*style:" || echo "")
          REFACTOR=$(echo "$CHANGELOG" | grep -i "^.*refactor\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*refactor:" || echo "")
          PERF=$(echo "$CHANGELOG" | grep -i "^.*perf\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*perf:" || echo "")
          TEST=$(echo "$CHANGELOG" | grep -i "^.*test\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*test:" || echo "")
          CHORE=$(echo "$CHANGELOG" | grep -i "^.*chore\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*chore:" || echo "")
          BUILD=$(echo "$CHANGELOG" | grep -i "^.*build\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*build:" || echo "")
          CI=$(echo "$CHANGELOG" | grep -i "^.*ci\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*ci:" || echo "")
          REVERT=$(echo "$CHANGELOG" | grep -i "^.*revert\([^)]*\):" || echo "$CHANGELOG" | grep -i "^.*revert:" || echo "")

          # Check for breaking changes (feat! or fix! or BREAKING CHANGE, including scoped commits)
          BREAKING=$(echo "$CHANGELOG" | grep -i "BREAKING CHANGE\|^.*feat!\([^)]*\):\|^.*fix!\([^)]*\):\|^.*feat!:\|^.*fix!:" || echo "")

          # Build release notes and write to file
          {
            echo "## What's Changed in $VERSION"
            echo ""
            
            if [ -n "$BREAKING" ]; then
              echo "### 💥 Breaking Changes"
              echo "$BREAKING"
              echo ""
            fi
            
            if [ -n "$FEATURES" ]; then
              echo "### 🚀 New Features"
              echo "$FEATURES"
              echo ""
            fi
            
            if [ -n "$FIXES" ]; then
              echo "### 🐛 Bug Fixes"
              echo "$FIXES"
              echo ""
            fi
            
            if [ -n "$PERF" ]; then
              echo "### ⚡ Performance Improvements"
              echo "$PERF"
              echo ""
            fi
            
            if [ -n "$REFACTOR" ]; then
              echo "### 🔧 Refactoring"
              echo "$REFACTOR"
              echo ""
            fi
            
            if [ -n "$TEST" ]; then
              echo "### 🧪 Tests"
              echo "$TEST"
              echo ""
            fi
            
            if [ -n "$BUILD" ]; then
              echo "### 🏗️ Build System"
              echo "$BUILD"
              echo ""
            fi
            
            if [ -n "$CI" ]; then
              echo "### 🔄 CI/CD"
              echo "$CI"
              echo ""
            fi
            
            if [ -n "$DOCS" ]; then
              echo "### 📚 Documentation"
              echo "$DOCS"
              echo ""
            fi
            
            if [ -n "$STYLE" ]; then
              echo "### 🎨 Code Style"
              echo "$STYLE"
              echo ""
            fi
            
            if [ -n "$REVERT" ]; then
              echo "### ↩️ Reverts"
              echo "$REVERT"
              echo ""
            fi
            
            if [ -n "$CHORE" ]; then
              echo "### 🔧 Maintenance"
              echo "$CHORE"
              echo ""
            fi
            
            echo "## Installation"
            echo ""
            echo "Download the \`scrape-similar-$VERSION.zip\` file and install it manually in Chrome at \`chrome://extensions/\`."
            echo ""
            echo "## Support"
            echo ""
            echo "If you encounter any issues or have questions, please [open an issue](https://github.com/${{ github.repository }}/issues) on GitHub."
            echo ""
            echo "---"
            echo ""
            echo "*Release generated automatically on $(date -u +"%Y-%m-%d %H:%M UTC")*"
          } > release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            package/scrape-similar-${{ github.ref_name }}.zip
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
